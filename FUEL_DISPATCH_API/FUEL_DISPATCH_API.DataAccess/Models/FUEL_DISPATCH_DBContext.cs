// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FUEL_DISPATCH_API.DataAccess.Models;

public partial class FUEL_DISPATCH_DBContext : DbContext
{
    public FUEL_DISPATCH_DBContext(DbContextOptions<FUEL_DISPATCH_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BranchOffices> BranchOffices { get; set; }

    public virtual DbSet<CalculatedComsuption> CalculatedComsuption { get; set; }

    public virtual DbSet<Dispatch> Dispatch { get; set; }

    public virtual DbSet<Dispensers> Dispensers { get; set; }

    public virtual DbSet<Drivers> Drivers { get; set; }

    public virtual DbSet<FuelTypes> FuelTypes { get; set; }

    public virtual DbSet<Generations> Generations { get; set; }

    public virtual DbSet<Locations> Locations { get; set; }

    public virtual DbSet<Makes> Makes { get; set; }

    public virtual DbSet<Measures> Measures { get; set; }

    public virtual DbSet<MethodsOfProvidingFuel> MethodsOfProvidingFuel { get; set; }

    public virtual DbSet<ModEngine> ModEngine { get; set; }

    public virtual DbSet<Models> Models { get; set; }

    public virtual DbSet<Roads> Roads { get; set; }

    public virtual DbSet<Role> Role { get; set; }

    public virtual DbSet<TokensPrefix> TokensPrefix { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<UsersRols> UsersRols { get; set; }

    public virtual DbSet<UsersTokens> UsersTokens { get; set; }

    public virtual DbSet<Vehicles> Vehicles { get; set; }

    public virtual DbSet<Zones> Zones { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BranchOffices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BranchOf__3214EC07F0FA6D02");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullLocation)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Location).WithMany(p => p.BranchOffices)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK__BranchOff__Locat__5224328E");

            entity.HasMany(d => d.User).WithMany(p => p.BranchOffice)
                .UsingEntity<Dictionary<string, object>>(
                    "BranchOfficesInChaergeUsers",
                    r => r.HasOne<Users>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__BranchOff__UserI__55009F39"),
                    l => l.HasOne<BranchOffices>().WithMany()
                        .HasForeignKey("BranchOfficeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__BranchOff__Branc__55F4C372"),
                    j =>
                    {
                        j.HasKey("BranchOfficeId", "UserId").HasName("PK__BranchOf__F65CF33D19CE88D1");
                    });
        });

        modelBuilder.Entity<CalculatedComsuption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CalculatedComsuption");

            entity.Property(e => e.CalculatedComsuption1)
                .HasColumnType("decimal(38, 14)")
                .HasColumnName("CalculatedComsuption");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Gallons).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Odometer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalCalculatedComsuption).HasColumnType("decimal(38, 14)");
            entity.Property(e => e.VehicleToken)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Dispatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Dispatch__3214EC07E49C3709");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gallons).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Notes)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Odometer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VehicleToken)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BranchOffice).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.BranchOfficeId)
                .HasConstraintName("FK__Dispatch__Branch__56E8E7AB");

            entity.HasOne(d => d.Dispenser).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.DispenserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Dispatch__Dispen__114A936A");

            entity.HasOne(d => d.Driver).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Dispatch__Driver__1332DBDC");

            entity.HasOne(d => d.Road).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.RoadId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Dispatch__RoadId__123EB7A3");

            entity.HasOne(d => d.VehicleTokenNavigation).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.VehicleToken)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Dispatch__Vehicl__10566F31");
        });

        modelBuilder.Entity<Dispensers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Dispense__3214EC07E80C11D8");

            entity.Property(e => e.CurrentCapacity)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Current_Capacity");
            entity.Property(e => e.DispenserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dispenser_Name");
            entity.Property(e => e.FuelType)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Fuel_Type");
            entity.Property(e => e.LastRefillDate)
                .HasColumnType("datetime")
                .HasColumnName("Last_Refill_Date");
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MaxCapacity)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Max_Capacity");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Drivers>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Drivers__3214EC076633E3D4");

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FullDirection)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LicenceExpDate).HasColumnType("datetime");
            entity.Property(e => e.MethodOfProvidingFuelAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasMany(d => d.MethodOfProvideFuel).WithMany(p => p.Driver)
                .UsingEntity<Dictionary<string, object>>(
                    "DriverMethodOfProvideFuel",
                    r => r.HasOne<MethodsOfProvidingFuel>().WithMany()
                        .HasForeignKey("MethodOfProvideFuelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Driver_Me__Metho__3A4CA8FD"),
                    l => l.HasOne<Drivers>().WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Driver_Me__Drive__395884C4"),
                    j =>
                    {
                        j.HasKey("DriverId", "MethodOfProvideFuelId").HasName("PK__Driver_M__5814C81B5534D26C");
                        j.ToTable("Driver_MethodOfProvideFuel");
                    });
        });

        modelBuilder.Entity<FuelTypes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FuelType__3214EC0731651F4D");

            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Generations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Generati__3214EC07F57C4C1D");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GenerationN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Locations>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Location__3214EC07519B99BD");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FullLocation)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Makes>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Makes__3214EC0766C44BA6");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Make)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Measures>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Measures__3214EC078BD6593A");

            entity.Property(e => e.Measure)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MethodsOfProvidingFuel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MethodsO__3214EC076CBAB600");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MethodName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ModEngine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ModEngin__3214EC07C96E9CC0");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModEngineN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Models>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Models__3214EC0777312CA4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Model)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Roads>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roads__3214EC0750670522");

            entity.Property(e => e.Apoint).HasColumnName("APoint");
            entity.Property(e => e.Bpoint).HasColumnName("BPoint");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Zone).WithMany(p => p.Roads)
                .HasForeignKey(d => d.ZoneId)
                .HasConstraintName("FK__Roads__ZoneId__403A8C7D");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07B8463FF4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RolName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TokensPrefix>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC07B25E00EC");

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullDirection)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(155);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Driver).WithMany(p => p.Users)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Users__DriverId__797309D9");
            entity.HasMany(r => r.Rols).WithMany(d => d.Users).UsingEntity<UsersRols>(x => x.HasOne(x => x.Rol).WithMany().HasForeignKey(x => x.RolId), x => x.HasOne(x => x.User).WithMany().HasForeignKey(x => x.UserId));

        });

        modelBuilder.Entity<UsersRols>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RolId }).HasName("PK__UsersRol__181AFC635E4D9579");

            entity.Property(e => e.AsignationDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.Rol).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.RolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsersRols__RolId__03F0984C");

            entity.HasOne(d => d.User).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsersRols__UserI__02FC7413");
        });

        modelBuilder.Entity<UsersTokens>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UsersTok__3214EC07AD286615");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpData).HasColumnType("datetime");
        });

        modelBuilder.Entity<Vehicles>(entity =>
        {
            entity.HasKey(e => e.Token).HasName("PK__Vehicles__1EB4F8168B825F03");

            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AverageConsumption).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Driver).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Vehicles__Driver__0C85DE4D");

            entity.HasOne(d => d.Generation).WithMany(p => p.VehiclesGeneration)
                .HasForeignKey(d => d.GenerationId)
                .HasConstraintName("FK__Vehicles__Genera__0B91BA14");

            entity.HasOne(d => d.Make).WithMany(p => p.VehiclesMake)
                .HasForeignKey(d => d.MakeId)
                .HasConstraintName("FK__Vehicles__MakeId__09A971A2");

            entity.HasOne(d => d.ModEngine).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.ModEngineId)
                .HasConstraintName("FK__Vehicles__ModEng__2739D489");

            entity.HasOne(d => d.Model).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("FK__Vehicles__ModelI__0A9D95DB");

            entity.HasMany(d => d.Fuel).WithMany(p => p.VehicleToken)
                .UsingEntity<Dictionary<string, object>>(
                    "VehicleFuel",
                    r => r.HasOne<FuelTypes>().WithMany()
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Vehicle_F__FuelI__2EDAF651"),
                    l => l.HasOne<Vehicles>().WithMany()
                        .HasForeignKey("VehicleToken")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Vehicle_F__Vehic__2DE6D218"),
                    j =>
                    {
                        j.HasKey("VehicleToken", "FuelId").HasName("PK__Vehicle___7CEF91B8D30CF459");
                        j.ToTable("Vehicle_Fuel");
                        j.IndexerProperty<string>("VehicleToken")
                            .HasMaxLength(50)
                            .IsUnicode(false);
                    });
        });

        modelBuilder.Entity<Zones>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Zones__3214EC07E8025F5F");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
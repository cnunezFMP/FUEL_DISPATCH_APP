// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;

namespace FUEL_DISPATCH_API.DataAccess.Models;

public partial class FUEL_DISPATCH_DBContext : DbContext
{
    public FUEL_DISPATCH_DBContext(DbContextOptions<FUEL_DISPATCH_DBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AllComsuption> AllComsuption { get; set; }
    public virtual DbSet<ArticleDataMaster> ArticleDataMaster { get; set; }

    public virtual DbSet<BranchOffices> BranchOffices { get; set; }
    public virtual DbSet<BranchIsland> BranchIslands { get; set; }

    public virtual DbSet<BranchOfficeInChargeUsers> BranchOfficesInChargeUsers { get; set; }

    public virtual DbSet<CalculatedComsuption> CalculatedComsuption { get; set; }

    public virtual DbSet<Companies> Companies { get; set; }

    public virtual DbSet<CompanyUser> CompanyUser { get; set; }

    public virtual DbSet<ComsuptionByDay> ComsuptionByDay { get; set; }

    public virtual DbSet<ComsuptionByMonth> ComsuptionByMonth { get; set; }

    public virtual DbSet<Dispatch> Dispatch { get; set; }

    public virtual DbSet<Dispenser> Dispenser { get; set; }

    public virtual DbSet<Driver> Driver { get; set; }

    public virtual DbSet<Drivers_MethodsOfProvideFuel> Drivers_MethodsOfProvideFuel { get; set; }

    public virtual DbSet<FuelType> FuelType { get; set; }

    public virtual DbSet<Generation> Generation { get; set; }

    public virtual DbSet<Location> Location { get; set; }

    public virtual DbSet<Make> Make { get; set; }

    public virtual DbSet<Measure> Measure { get; set; }

    public virtual DbSet<MethodOfProvidingFuel> MethodOfProvidingFuel { get; set; }

    public virtual DbSet<ModEngine> ModEngine { get; set; }

#pragma warning disable CS0114 // Member hides inherited member; missing override keyword
    public virtual DbSet<Model> Model { get; set; }
#pragma warning restore CS0114 // Member hides inherited member; missing override keyword

    public virtual DbSet<Road> Road { get; set; }

    public virtual DbSet<Role> Role { get; set; }
    public virtual DbSet<Store> Store { get; set; }
    public virtual DbSet<StoreMovement> StoreMovement { get; set; }
    public virtual DbSet<TokenPrefix> TokenPrefix { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<UserToken> UserToken { get; set; }

    public virtual DbSet<UsersRols> UsersRols { get; set; }

    public virtual DbSet<Vehicle> Vehicle { get; set; }

    public virtual DbSet<VehiclesFuels> VehiclesFuels { get; set; }

    public virtual DbSet<Zone> Zone { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AllComsuption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllComsuption");

            entity.Property(e => e.TotalCalculatedComsuption).HasColumnType("decimal(38, 14)");
        });

        modelBuilder.Entity<ArticleDataMaster>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("ArticleDataMaster");
        });


        modelBuilder.Entity<BranchOffices>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BranchOf__3214EC07F0FA6D02");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullLocation)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.Location).WithMany(p => p.BranchOffices)
                .HasForeignKey(d => d.LocationId)
                .HasConstraintName("FK__BranchOff__Locat__5224328E");
        });

        modelBuilder.Entity<BranchOfficeInChargeUsers>(entity =>
        {
            entity.HasKey(e => new { e.BranchOfficeId, e.UserId }).HasName("PK__BranchOf__F65CF33D19CE88D1");

            entity.HasOne(d => d.BranchOffice).WithMany(p => p.BranchOfficesInChargeUsers)
                .HasForeignKey(d => d.BranchOfficeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BranchOff__Branc__55F4C372");

            entity.HasOne(d => d.User).WithMany(p => p.BranchOfficesInChargeUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__BranchOff__UserI__55009F39");
        });

        modelBuilder.Entity<CalculatedComsuption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CalculatedComsuption");

            entity.Property(e => e.CalculatedComsuption1)
                .HasColumnType("decimal(38, 14)")
                .HasColumnName("CalculatedComsuption");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Gallons).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Odometer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalCalculatedComsuption).HasColumnType("decimal(38, 14)");
        });

        modelBuilder.Entity<Companies>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Company__3214EC07F3D5582B");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CEOFounder)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompanyRNC)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FullAddress)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Industry)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(8000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CompanyUser>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CompanyId }).HasName("PK__CompanyU__C551BD86113AC862");

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyUser)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CompanyUs__Compa__7A3223E8");

            entity.HasOne(d => d.User).WithMany(p => p.CompanyUser)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CompanyUs__UserI__793DFFAF");
        });

        modelBuilder.Entity<ComsuptionByDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ComsuptionByDay");

            entity.Property(e => e.TotalFuelConsumed).HasColumnType("decimal(38, 0)");
        });

        modelBuilder.Entity<ComsuptionByMonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ComsuptionByMonth");

            entity.Property(e => e.TotalFuelConsumed).HasColumnType("decimal(38, 0)");
        });

        modelBuilder.Entity<Store>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("Store");
        });

        modelBuilder.Entity<StoreMovement>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("StoreMovement");
            entity.HasOne(e => e.Store)
                  .WithMany(e => e.StoreMovements)
                  .HasForeignKey(e => e.StoreId);

        });

        modelBuilder.Entity<Dispatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Dispatch__3214EC07E49C3709");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Gallons).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Notes)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Odometer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.BranchOffice).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.BranchOfficeId)
                .HasConstraintName("FK__Dispatch__Branch__56E8E7AB");

            entity.HasOne(d => d.Dispenser).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.DispenserId)
                .HasConstraintName("FK__Dispatch__Dispen__114A936A");

            entity.HasOne(d => d.Driver).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Dispatch__Driver__681373AD");

            entity.HasOne(d => d.Road).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.RoadId)
                .HasConstraintName("FK__Dispatch__RoadId__123EB7A3");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Dispatch)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__Dispatch__Vehicl__2057CCD0");

            entity.HasOne(e => e.Store).WithMany(e => e.Dispatches).HasForeignKey(e => e.StoreId);
        });
        modelBuilder.Entity<BranchIsland>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("BranchIslands");
            entity.HasOne(e => e.BranchOffice)
            .WithMany(e =>
            e.BranchIslands)
            .HasForeignKey(e =>
            e.BranchOfficeId);
        });
        modelBuilder.Entity<Dispenser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Dispense__3214EC07E80C11D8");

            entity.ToTable("Dispenser");

            entity.HasOne(e => e.BranchIsland).WithMany(e => e.Dispensers).HasForeignKey(e => e.BranchIslandId);

        });

        modelBuilder.Entity<Driver>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Drivers__3214EC076633E3D4");

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FullDirection)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Identification).HasMaxLength(100);
            entity.Property(e => e.LicenceExpDate).HasColumnType("datetime");
            entity.Property(e => e.MethodOfProvidingFuelAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PhoneNumber).HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Driver)
                .HasForeignKey(d => d.VehicleId)
                .HasConstraintName("FK__Drivers__Vehicle__2610A626");
        });

        modelBuilder.Entity<Drivers_MethodsOfProvideFuel>(entity =>
        {
            entity.HasKey(e => new { e.DriverId, e.MethodOfProvideFuelId }).HasName("PK__Driver_M__5814C81B5534D26C");

            entity.HasOne(d => d.Driver).WithMany(p => p.Drivers_MethodsOfProvideFuel)
                .HasForeignKey(d => d.DriverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Driver_Me__Drive__395884C4");

            entity.HasOne(d => d.MethodOfProvideFuel).WithMany(p => p.Drivers_MethodsOfProvideFuel)
                .HasForeignKey(d => d.MethodOfProvideFuelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Driver_Me__Metho__3A4CA8FD");
        });

        modelBuilder.Entity<FuelType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FuelType__3214EC0731651F4D");

            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Generation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Generati__3214EC07F57C4C1D");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GenerationN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Location__3214EC07519B99BD");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FullLocation)
                .HasMaxLength(155)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Make>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Makes__3214EC0766C44BA6");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Makename).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Measure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Measures__3214EC078BD6593A");

            entity.Property(e => e.Measurename).HasMaxLength(255);
        });

        modelBuilder.Entity<MethodOfProvidingFuel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MethodsO__3214EC076CBAB600");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MethodName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ModEngine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ModEngin__3214EC07C96E9CC0");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModEngineN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Model>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Models__3214EC0777312CA4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Modelname).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Road>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roads__3214EC0750670522");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Zone).WithMany(p => p.Road)
                .HasForeignKey(d => d.ZoneId)
                .HasConstraintName("FK__Roads__ZoneId__403A8C7D");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07B8463FF4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RolName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TokenPrefix>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC07B25E00EC");

            entity.HasIndex(e => e.Username, "U_Username").IsUnique();

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullDirection)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber).HasMaxLength(155);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Driver).WithMany(p => p.User)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Users__DriverId__1B9317B3");

            entity.HasMany(r => r.Rols)
            .WithMany(d => d.Users)
            .UsingEntity<UsersRols>(x => x.HasOne(x => x.Rol)
            .WithMany().HasForeignKey(x => x.RolId),
            x => x.HasOne(x => x.User)
            .WithMany()
            .HasForeignKey(x => x.UserId));

        });

        modelBuilder.Entity<UserToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UsersTok__3214EC07AD286615");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpData).HasColumnType("datetime");
        });

        modelBuilder.Entity<UsersRols>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RolId }).HasName("PK__UsersRol__181AFC635E4D9579");

            entity.HasOne(d => d.Rol).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.RolId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsersRols__RolId__03F0984C");

            entity.HasOne(d => d.User).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsersRols__UserI__02FC7413");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Vehicles__3214EC073B5115F7");

            entity.HasIndex(e => e.Token, "U_VToken").IsUnique();

            entity.Property(e => e.AverageConsumption).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Capacity).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Plate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DriverNavigation).WithMany(p => p.VehicleNavigation)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Vehicles__Driver__0C85DE4D");

            entity.HasOne(d => d.Generation).WithMany(p => p.VehicleGeneration)
                .HasForeignKey(d => d.GenerationId)
                .HasConstraintName("FK__Vehicles__Genera__0B91BA14");

            entity.HasOne(d => d.Make).WithMany(p => p.VehicleMake)
                .HasForeignKey(d => d.MakeId)
                .HasConstraintName("FK__Vehicles__MakeId__09A971A2");

            entity.HasOne(d => d.Measure).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.MeasureId)
                .HasConstraintName("FK__Vehicles__Measur__6166761E");

            entity.HasOne(d => d.ModEngine).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.ModEngineId)
                .HasConstraintName("FK__Vehicles__ModEng__2739D489");

            entity.HasOne(d => d.Model).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("FK__Vehicles__ModelI__0A9D95DB");

            entity.HasMany(r => r.Fuels)
            .WithMany(d => d.Vehicles)
            .UsingEntity<VehiclesFuels>(x => x.HasOne(x => x.Fuel)
            .WithMany().HasForeignKey(x => x.FuelId),
            x => x.HasOne(x => x.Vehicle)
            .WithMany()
            .HasForeignKey(x => x.VehicleId));

        });

        modelBuilder.Entity<VehiclesFuels>(entity =>
        {
            entity.HasKey(e => new { e.FuelId, e.VehicleId });

            entity.HasOne(d => d.Fuel).WithMany(p => p.VehiclesFuels)
                .HasForeignKey(d => d.FuelId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Vehicle).WithMany(p => p.VehiclesFuels)
                .HasForeignKey(d => d.VehicleId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Zone>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.Property(e => e.CreatedAt);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.UpdatedAt);
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
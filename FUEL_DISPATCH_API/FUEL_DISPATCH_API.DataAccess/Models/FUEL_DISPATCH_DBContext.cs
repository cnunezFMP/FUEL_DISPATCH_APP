// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using FUEL_DISPATCH_API.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;

namespace FUEL_DISPATCH_API.DataAccess.Models;

public partial class FUEL_DISPATCH_DBContext : DbContext
{
    public FUEL_DISPATCH_DBContext(DbContextOptions<FUEL_DISPATCH_DBContext> options)
        : base(options)
    {
    }
    public virtual DbSet<AllComsuption> AllComsuption { get; set; }
    public virtual DbSet<ArticleDataMaster> ArticleDataMaster { get; set; }

    public virtual DbSet<BranchOffices> BranchOffices { get; set; }
    public virtual DbSet<BranchIsland> BranchIslands { get; set; }
    public virtual DbSet<Booking> Booking { get; set; }
    public virtual DbSet<CalculatedComsuption> CalculatedComsuption { get; set; }
    public virtual DbSet<vw_ActualStock> vw_ActualStock { get; set; }
    public virtual DbSet<vw_WareHouseHistory> Vw_WareHouseHistories { get; set; }

    public virtual DbSet<Companies> Companies { get; set; }

    public virtual DbSet<UsersCompanies> UsersCompanies { get; set; }

    public virtual DbSet<ComsuptionByDay> ComsuptionByDay { get; set; }

    public virtual DbSet<ComsuptionByMonth> ComsuptionByMonth { get; set; }
    public virtual DbSet<Dispenser> Dispenser { get; set; }
    public virtual DbSet<Driver> Driver { get; set; }
    public virtual DbSet<EmployeeConsumptionLimits> EmployeeConsumptionLimit { get; set; }
    public virtual DbSet<Generation> Generation { get; set; }
    public virtual DbSet<Make> Make { get; set; }

    public virtual DbSet<OdometerMeasure> Measure { get; set; }

    public virtual DbSet<DriverMethodOfComsuption> DriverMethodOfComsuption { get; set; }

    public virtual DbSet<ModEngine> ModEngine { get; set; }
    public virtual DbSet<Model> Model { get; set; }
    public virtual DbSet<Road> Road { get; set; }
    public virtual DbSet<Role> Role { get; set; }
    public virtual DbSet<Stock> Stock { get; set; }
    public virtual DbSet<WareHouse> WareHouse { get; set; }
    public virtual DbSet<WareHouseMovement> WareHouseMovement { get; set; }
    public virtual DbSet<Request> Request { get; set; }
    public virtual DbSet<User> User { get; set; }
    public virtual DbSet<UserToken> UserToken { get; set; }
    public virtual DbSet<UsersRols> UsersRols { get; set; }
    public virtual DbSet<Vehicle> Vehicle { get; set; }
    public virtual DbSet<Zone> Zone { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AllComsuption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("AllComsuption");

            entity.Property(e => e.TotalCalculatedComsuption).HasColumnType("decimal(38, 14)");
        });
        modelBuilder.Entity<ArticleDataMaster>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("ArticleDataMaster");

        });
        modelBuilder.Entity<BranchOffices>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("BranchOffices");
            entity.HasOne(d => d.Company).WithMany(p => p.BranchOffices)
                .HasForeignKey(d => d.CompanyId);
        });
        modelBuilder.Entity<CalculatedComsuption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CalculatedComsuption");

            entity.Property(e => e.CalculatedComsuption1)
                .HasColumnType("decimal(38, 14)")
                .HasColumnName("CalculatedComsuption");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.Gallons).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Odometer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalCalculatedComsuption).HasColumnType("decimal(38, 14)");
        });
        modelBuilder.Entity<Companies>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("Companies");
            entity.HasMany(x => x.BranchOffices).WithOne(x => x.Company).HasForeignKey(x => x.CompanyId);
        });
        modelBuilder.Entity<ComsuptionByDay>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ComsuptionByDay");

            entity.Property(e => e.TotalFuelConsumed).HasColumnType("decimal(38, 0)");
        });
        modelBuilder.Entity<ComsuptionByMonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("ComsuptionByMonth");

            entity.Property(e => e.TotalFuelConsumed).HasColumnType("decimal(38, 0)");
        });
        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(x => x.Id);
            entity.HasOne(x => x.Vehicle).WithMany(x => x.Bookings).HasForeignKey(x => x.VehicleId).OnDelete(DeleteBehavior.ClientCascade);
            entity.HasOne(x => x.Driver).WithMany(x => x.Bookings).HasForeignKey(x => x.DriverId).OnDelete(DeleteBehavior.ClientCascade);
        });
        modelBuilder.Entity<WareHouseMovement>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable
                (
                    "WareHouseMovement",
                    entity =>
                    entity.HasTrigger("trg_UpdateStock")
                );
            entity.HasOne(e => e.Vehicle).WithMany(e => e.WareHouseMovements).HasForeignKey(e => e.VehicleId);
            entity.HasOne(d => d.Driver).WithMany(p => p.WareHouseMovements).HasForeignKey(d => d.DriverId);
            entity.HasOne(e => e.BranchOffice).WithMany(e => e.WareHouseMovements).HasForeignKey(e => e.BranchOfficeId);
            entity.HasOne(d => d.Dispenser).WithMany(p => p.WareHouseMovements).HasForeignKey(d => d.DispenserId);
            entity.HasOne(e => e.Road).WithMany(e => e.WareHouseMovements).HasForeignKey(f => f.RoadId);

            entity.HasOne(e => e.WareHouse)
            .WithMany(e => e.WareHouseMovements)
            .HasForeignKey(f => f.WareHouseId);
            entity.HasOne(e => e.ToWareHouse)
            .WithMany(e => e.ToWareHouseMovements)
            .HasForeignKey(f => f.ToWareHouseId);
            entity.HasOne(e => e.ArticleDataMaster).WithMany(e => e.WareHouseMovements).HasForeignKey(f => f.ItemId);
        });
        modelBuilder.Entity<WareHouse>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("WareHouse");
            entity.HasOne(x => x.Company).WithMany(x => x.WareHouses).HasForeignKey(x => x.CompanyId);
            entity.HasOne(e => e.BranchOffice).WithMany(e => e.WareHouses).HasForeignKey(e => e.BranchOfficeId);

        });

        modelBuilder.Entity<BranchIsland>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("BranchIsland");
            entity.HasOne(e => e.BranchOffice)
            .WithMany(e =>
            e.BranchIslands)
            .HasForeignKey(e =>
            e.BranchOfficeId);
        });
        modelBuilder.Entity<Dispenser>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Dispenser");

            entity.HasOne(e => e.BranchIsland).WithMany(e => e.Dispensers).HasForeignKey(e => e.BranchIslandId);

        });
        modelBuilder.Entity<Driver>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.ToTable("Driver");

            entity.HasOne(d => d.Vehicle).WithMany(p => p.Driver)
                .HasForeignKey(d => d.VehicleId);
        });

        modelBuilder.Entity<EmployeeConsumptionLimits>(entity =>
        {
            entity.HasKey(x => new { x.DriverId, x.MethodOfComsuptionId });
            entity.ToTable("EmployeeConsumptionLimit");
            entity.HasOne(x => x.Driver).WithMany(x => x.EmployeeConsumptionLimits).HasForeignKey(x => x.DriverId).OnDelete(DeleteBehavior.SetNull);
            entity.HasOne(x => x.DriverMethodOfComsuption).WithMany(x => x.EmployeeConsumptionLimits).HasForeignKey(x => x.MethodOfComsuptionId).OnDelete(DeleteBehavior.SetNull);
        });

        modelBuilder.Entity<Generation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Generati__3214EC07F57C4C1D");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GenerationN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<Make>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Makes__3214EC0766C44BA6");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Makename).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<OdometerMeasure>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Measures__3214EC078BD6593A");

            entity.Property(e => e.Measurename).HasMaxLength(255);
        });
        modelBuilder.Entity<DriverMethodOfComsuption>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MethodsO__3214EC076CBAB600");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MethodName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<ModEngine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ModEngin__3214EC07C96E9CC0");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModEngineN)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<Model>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Models__3214EC0777312CA4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Modelname).HasMaxLength(255);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<Road>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roads__3214EC0750670522");

            entity.ToTable("Road");
            entity.HasOne(d => d.Zone).WithMany(p => p.Road)
                .HasForeignKey(d => d.ZoneId);
        });
        modelBuilder.Entity<Request>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("Request");
            entity.HasOne(e => e.Vehicle).WithMany(e => e.Requests).HasForeignKey(e => e.VehicleId);
            entity.HasOne(e => e.Driver).WithMany(e => e.Requests).HasForeignKey(e => e.DriverId);
        });
        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Role__3214EC07B8463FF4");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RolName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.ToTable("Stock");
            entity.HasOne(e => e.WareHouse).WithMany(e => e.Stocks).HasForeignKey(e => e.WareHouseId);
            entity.HasOne(e => e.ArticleDataMaster).WithMany(e => e.Stocks).HasForeignKey(e => e.ItemId);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.HasIndex(e => e.Username, "U_Username").IsUnique();

            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullDirection)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber).HasMaxLength(155);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Driver).WithMany(p => p.User)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Users__DriverId__1B9317B3");

            entity.HasMany(r => r.Rols)
            .WithMany(d => d.Users)
            .UsingEntity<UsersRols>(x => x.HasOne(x => x.Rol)
            .WithMany().HasForeignKey(x => x.RolId),
            x => x.HasOne(x => x.User)
            .WithMany()
            .HasForeignKey(x => x.UserId));

            entity.HasMany(r => r.Companies)
            .WithMany(d => d.Users)
            .UsingEntity<UsersCompanies>(x => x.HasOne(x => x.Company)
            .WithMany().HasForeignKey(x => x.CompanyId),
            x => x.HasOne(x => x.User)
            .WithMany()
            .HasForeignKey(x => x.UserId));

        });
        modelBuilder.Entity<UserToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__UsersTok__3214EC07AD286615");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpData).HasColumnType("datetime");
        });
        modelBuilder.Entity<UsersCompanies>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.CompanyId });
            entity.HasOne(e => e.User).WithMany(e => e.UsersCompanies).HasForeignKey(e => e.UserId);
            entity.HasOne(e => e.Company).WithMany(e => e.UsersCompanies).HasForeignKey(e => e.CompanyId);
        });
        modelBuilder.Entity<UsersRols>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.RolId });

            entity.HasOne(d => d.Rol).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.RolId)
                .OnDelete(DeleteBehavior.SetNull);

            entity.HasOne(d => d.User).WithMany(p => p.UsersRols)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull);
        });
        modelBuilder.Entity<vw_ActualStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ActualStock");
        });
        modelBuilder.Entity<vw_WareHouseHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Vw_WareHouseHistories");
        });
        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Vehicles__3214EC073B5115F7");

            entity.HasIndex(e => e.Ficha, "U_VToken").IsUnique();

            entity.Property(e => e.AverageConsumption).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.FuelTankCapacity).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Plate)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Ficha)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.DriverNavigation).WithMany(p => p.VehicleNavigation)
                .HasForeignKey(d => d.DriverId)
                .HasConstraintName("FK__Vehicles__Driver__0C85DE4D");

            entity.HasOne(d => d.Generation).WithMany(p => p.VehicleGeneration)
                .HasForeignKey(d => d.GenerationId)
                .HasConstraintName("FK__Vehicles__Genera__0B91BA14");

            entity.HasOne(d => d.Make).WithMany(p => p.VehicleMake)
                .HasForeignKey(d => d.MakeId)
                .HasConstraintName("FK__Vehicles__MakeId__09A971A2");

            entity.HasOne(d => d.Measure).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.OdometerMeasureId)
                .HasConstraintName("FK__Vehicles__Measur__6166761E");

            entity.HasOne(d => d.ModEngine).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.ModEngineId)
                .HasConstraintName("FK__Vehicles__ModEng__2739D489");

            entity.HasOne(d => d.Model).WithMany(p => p.Vehicle)
                .HasForeignKey(d => d.ModelId)
                .HasConstraintName("FK__Vehicles__ModelI__0A9D95DB");
        });
        modelBuilder.Entity<Zone>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.Property(e => e.CreatedAt);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status).IsUnicode(false);
            entity.Property(e => e.UpdatedAt);
            entity.Property(e => e.UpdatedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
        });
        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}